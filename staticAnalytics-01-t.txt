近年来，由于其潜在经济价值，加密货币吸引了大量投资者的注意。根据一份报告显示，截至2023年上半年，加密货币持有者数量已经突破了5亿人的里程碑。如此庞大的用户群体使得加密货币市场异常活跃。

随着新手投资者数量增加，有越来越多的需求来使用用户友好型软件来帮助他们参与区块链交易，这导致了加密货币钱包的出现。根据凭证是存储在集中化第三方手中还是用户手中，钱包可以分为托管和非托管两种。最近FTX的倒闭，作为一家提供托管钱包服务的公司，凸显了中央控制带来的风险，引发了人们对非托管钱包的兴趣激增。非托管钱包提供数字资产完全控制和增强安全性。

特别是，基于浏览器的非托管加密货币钱包因其即时可访问性和简单直观的界面而受到关注。例如，像 Metamask、Phantom 和 Coinbase 这样的基于浏览器的钱包取得了巨大成功，下载量超过100万次。这些钱包作为浏览器扩展程序，方便用户轻松创建账户，并获得全面的区块链功能。

"高树招惹多风。尽管用户可以通过非托管钱包完全控制他们的资产，但安全管理凭证的责任也落在他们身上。这种加大的责任伴随着一系列挑战，因为非托管钱包的安全环境不断发展变化。近年来，一些事件揭示了即使是最有声望的非托管钱包也存在漏洞[6-10]。这些事件打破了非托管钱包完全安全的想法，往往导致用户的财务损失。例如，Slope Wallet事件导致9,231个钱包的私钥泄露，由于钱包对敏感信息的处理漏洞，大约损失了410万美元 [6]。"

此外，一些恶意软件专门针对基于浏览器的钱包。

他们通常利用钱包中的漏洞来获取用户凭据，从而窃取他们的加密货币。例如，通过访问基于浏览器的钱包的易感本地存储，LummaC2 Stealer能够从包括Chrome和Firefox在内的10个浏览器上的60多个钱包中窃取敏感信息。

因此，紧急的是要识别非托管钱包的漏洞，并防止利用这些漏洞的攻击。实际上，研究界已经开发出了几种漏洞检测工具。然而，它们主要集中在移动应用程序的安全分析上。例如，Li等人[14]探索了Android加密货币钱包的攻击面，发现由于Android系统设计存在缺陷和开发不慎，安全问题可能会暴露用户的私钥和短语，从而危及数百万用户的财务安全。Uddin等人[15]开发了一个半自动化框架，用于评估Android加密货币钱包应用程序的安全性，揭示了在众多应用程序中与密钥存储和交易隐私相关的关键漏洞。

据我们所知，浏览器钱包的漏洞尚未得到系统的调查，同时也缺乏自动化工具来检测这些漏洞。区块链社区仍然存在一些未知问题。首先，哪些主要漏洞影响这些钱包？由于区块链技术及其相应钱包的快速发展，漏洞也在不断演变，导致很难创建一个全面和最新的列表。其次，如何可靠地自动检测这些漏洞？在传统网络应用程序中常见的漏洞可能在浏览器钱包中表现不同，这可能降低现有检测方法的有效性。此外，目前还没有可用于检测专门针对浏览器钱包的新兴漏洞的自动化工具。最后，这些漏洞存在的程度如何？尽管存在一些孤立的漏洞报告，但对于这些漏洞的特征、这些钱包的安全级别以及其开发人员的安全意识，仍然缺乏全面的了解。

这项工作首先对基于浏览器的钱包进行漏洞特征描述和检测。通过总结安全公司的安全报告和钱包提供商的公告，我们首先创建了一个包括6种浏览器钱包漏洞类型的分类体系（详见第3.1节），其中包括传统网络漏洞，这些漏洞在传统网站上也会出现，但通常具有新的表现形式；以及针对加密货币钱包的新兴漏洞，往往具有更严重的安全影响。为了检测这些漏洞，我们提出了一种混合方法，结合了对浏览器扩展程序的静态和动态分析，以准确自动地检测浏览器钱包中的漏洞（详见第4节）。对96个常见的基于浏览器的钱包进行的评估表明，我们的框架能够对90%的钱包进行高准确度的自动操作（详见第5节）。在这次评估中，发现了70个（全部钱包的73%）存在116个漏洞。这些发现强调了一个令人担忧的趋势：许多钱包开发者忽视了关键的安全机制，如密码策略和凭证存储等。最后，我们的影响分析表明，这些漏洞可能影响超过920万的钱包用户。然而，大多数钱包开发者仍未修复这些问题，也没有足够重视这些问题。通过我们的漏洞披露，我们帮助了20个不同的钱包解决了总共26个漏洞。这一努力得到了8个钱包开发者的认可，并产生了2000美元的漏洞赏金。

总的来说，在本文中我们做出了以下主要研究贡献：首先，我们迈出了创建基于浏览器的加密货币钱包漏洞分类的第一步。通过对现有安全报告的全面调查和对流行应用的详细分析，我们为6种基于浏览器的钱包漏洞创建了一个分类系统，其中包括传统类型（如点击劫持、跨站脚本、缺陷密码策略）和新兴类型（如恶魔漏洞、多余存储、缺陷加密）。

我们开发了一个自动化漏洞检测框架，用于识别基于浏览器的加密货币钱包中的漏洞。这个框架叫做 WalletRadar，结合了静态和动态分析技术，能够准确识别基于浏览器的钱包中的漏洞。评估结果表明，这个框架可以在超过90%的钱包上实现自动化，并且具有较高的准确性。

我们对基于浏览器的加密货币钱包中的漏洞进行了系统化的特征化研究。这项工作发现，这些漏洞在基于浏览器的钱包中普遍存在，而开发者对它们缺乏关注。WalletRadar发现，在96个经过测试的基于浏览器的钱包中，有70个存在漏洞。随后的影响分析显示，超过920万用户面临由于这些漏洞而导致信息泄露和财务损失的风险。我们已经从8个钱包开发者那里收到了10个漏洞的确认，并支付了超过2000美元的漏洞赏金。此外，我们观察到，在我们披露之后，有12个钱包开发者默默修复了16个漏洞。

2 背景
2.1 加密货币钱包
加密货币最初作为区块链激励机制的一个组成部分而开发， 在区块链系统内扮演着至关重要的角色。第一个加密货币比特币于2009年发布，到目前为止，全球已有超过两万三千种加密货币。随着2017年加密货币受到极大关注，许多人涌入加密货币市场进行获取或交易。对于大多数缺乏技术经验的人来说，使用加密货币钱包是在区块链平台上进行交易的必备条件。这种钱包可以是软件或硬件工具，通过与区块链账本进行交互，便于存储和交易加密货币。然而，与直接存储法定货币的传统钱包不同，加密货币钱包并不直接存储数字资产。由于加密货币本质上存在于区块链账本中的交易数据中，钱包通过检索用户的交易信息（即区块链账户的唯一地址）来验证用户的加密货币持有情况。

根据密钥存储方式，加密货币钱包通常可分为两类：(i) 托管钱包，依赖于中央第三方来存储密钥；(ii) 非托管钱包，将密钥存储在本地。非托管钱包由于提供了更加个人化的安全性和资产直接拥有权而逐渐受到欢迎。它们也符合加密货币范式核心的去中心化原则。

非托管钱包包括基于浏览器、桌面和移动端的钱包。现有研究已经揭示了与移动端钱包及其操作环境相关的一系列安全问题。尽管基于浏览器的钱包由于在线便捷而拥有庞大的用户群，但它们缺乏系统化的安全分析。像MetaMask这样的基于浏览器的钱包拥有超过1000万用户。该钱包程序可从浏览器扩展商店下载并本地操作，用户数据也存储在本地浏览器中，为用户提供全面的控制。然而，包括MetaMask在内的基于浏览器的非托管钱包并不免于安全威胁，与漏洞相关的事件经常被报道。因此，我们的研究主要关注这类钱包，旨在挖掘其中普遍存在的独特安全问题，创建一个基于这些漏洞的分类法，并制定识别方法。

浏览器钱包的一般工作流程通常包括钱包创建、钱包备份以及其他常规钱包操作。

现有钱包 导入钱包 锁定/解锁钱包 初始化钱包 创建钱包 备份钱包新建钱包发送交易常规操作 助记词显示文件备份 DApp 交互…… 图1：基于浏览器的加密货币钱包的一般工作流程。

(i) 钱包创建：在钱包刚启动并浏览了起始页面后，用户可以选择创建全新的钱包，或导入已有的钱包。

在创建新钱包时，用户需要设置一个密码，用于解锁钱包。接着钱包会生成一对密钥，即私钥和公钥，并基于公钥进一步输出钱包地址。此外，钱包还会自动生成一串用于恢复钱包的单词（称为“助记词”）。如果要整合现有的钱包，用户需要提供原始私钥或助记词，并设置钱包密码完成钱包导入。

(二)钱包备份：在钱包备份过程中，用户首先需要提供密码来通过身份验证。随后，钱包将以明文形式显示助记词或私钥，让用户复制并备份到其他地方。一些钱包还提供将这些敏感数据备份到文件的方法。在这种情况下，钱包可能需要用户提供另一个临时密码来加密备份文件，以确保其安全性。

(iii) 一般操作：钱包可能参与其他一般操作，比如交易发起和去中心化应用（DApps）交互。在这些操作中，钱包充当了一个中介，帮助用户与区块链进行交易活动的沟通。出于安全考虑，对于涉及敏感操作的情况，例如钱包备份，钱包要求密码验证用户身份，即需要用户输入密码才能解锁并执行这些敏感操作。

漏洞分类法是指理解和识别基于浏览器的加密货币钱包固有的漏洞。为了进行全面的分析，我们首先提出了一个分类法。具体来说，在钱包生命周期的每个阶段的行为中，我们专注于敏感操作，如创建、备份和解锁，如图1所示。换句话说，我们关注钱包创建、备份和解锁等阶段中的行为。需要注意的是，由于区块链交互的安全性，如交易处理，主要取决于区块链的一方，本文不考虑这些活动的威胁。

我们的目标是将漏洞划分为以下两个方面：(i) 传统网络漏洞。由于 Web 扩展基本上是在 Web 页面上运行，因此需要收集传统网络漏洞并考虑它们的适用性。这涵盖了一系列漏洞，如注入、跨站脚本（XSS）、访问控制缺陷和点击劫持。(ii) 新兴加密货币钱包漏洞。尽管第一类的范围很广，但对传统网络应用影响有限的漏洞可能在基于浏览器的钱包中构成更严重的威胁。因此，受移动钱包的现有文献启发[14, 15, 21]，这一类别包括一些特定的漏洞，如敏感数据管理、存储过程中的缺陷和加密方法的不当使用，这可能导致基于浏览器的加密货币钱包中敏感数据泄露甚至财务损失。

因此，除了与浏览器钱包安全直接相关的资料外，我们还考虑了一般web安全的文献，以确保我们分类系统的健壮性。

这种方法使我们能够将区块链特定漏洞和广泛网络应用程序中常见的漏洞结合起来，为基于浏览器的钱包的安全格局提供了全面的视角。具体来说，我们编制了一份基于相关研究[19, 20]、最佳行业实践指南[22-24]和安全报告[25-27]的基于浏览器的钱包中的6个安全漏洞列表。我们系统地审查了每个信息来源，以收集有关特定于基于浏览器的钱包的漏洞的信息。这包括评估每个漏洞的特征和影响，以决定其与基于浏览器的钱包的相关性。为了确保准确性并确保没有遗漏任何细节，两位作者独立检查了分类。最终，这些漏洞被划分为我们之前提到的两类，如表1所示。

表格1：基于浏览器的加密货币钱包的漏洞。

点击劫持是一种网络欺诈手段，通过覆盖页面诱使用户误入钓鱼网站。

XSS是在页面中注入恶意脚本的一种攻击方式。

存在缺陷的密码策略允许设置弱密码，容易被破解。

多余存储：指没有必要存储敏感数据。

恶魔的弱点 - 敏感密钥的不安全缓存。

错误的加密方法。使用了弱加密方法。

3.2 传统Web漏洞 3.2.1 点击劫持 点击劫持是一种利用视觉欺骗的漏洞。在加密货币钱包中，攻击者会在精心制作的钓鱼网页上叠加一个透明的钱包主页，这个主页是从目标基于浏览器的钱包中提取的。

当粗心的用户与具有欺骗性的页面交互时，他们的钱包可能会受到操控。这可能导致未经授权的资金转移或敏感数据泄露。与传统的点击劫持防御措施形成对比的是，传统方法主要是通过包含类似内容安全策略（CSP）和X-Frame-Options等头部信息来限制浏览器呈现响应中嵌入页面的方式，而浏览器扩展则依赖于它们的配置文件来控制外部网站的访问权限。因此，如果钱包的主要HTML页面被列在“manifest.json”文件中“web accessible resources”的配置下，外部页面就能够访问主页面，从而可能引入点击劫持漏洞。

3.2.2 跨站脚本（XSS）攻击XSS攻击利用呈现动态内容的网络功能[31-33]。攻击者通常会将恶意JavaScript代码插入HTML页面中，以操纵呈现的内容。在基于浏览器的加密货币钱包中，XSS攻击有两个显着影响，即自动页面操纵和未经授权访问本地存储（例如localStorage和indexedDB）。前者可能导致未经授权的资金转移，后者可能导致加密数据泄漏。

Web浏览器扩展通常通过HTML文档对象模型(DOM)向用户提供动态通知、自动重定向和其他功能。

在 HTML 文档对象模型加载完成后，加密货币钱包经常会修改 DOM 来显示特定页面内容。如果这些修改涉及敏感功能，可能会导致基于 DOM 的跨站脚本攻击漏洞。

3.2.3 密码策略缺陷 要求用户设置复杂密码是至关重要的。在基于浏览器的加密货币钱包中，用户钱包中的所有信息都是加密的并且存储在本地。如果采用弱密码，攻击者可能会尝试暴力破解攻击，导致用户失去对他们钱包的控制。CheckPoint的一份报告[7]指出，当攻击者通过恶意手段获取存储在本地的加密钱包信息时，他们可以在4核Intel Core i7 CPU上每秒尝试95个密码，这足以利用一个弱6位数字密码。

3.3 新兴的加密货币钱包漏洞 3.3.1 冗余存储 冗余存储漏洞是指当钱包在本地存储中存储敏感信息或相关中间处理结果时产生的漏洞。这会显著降低攻击者获取敏感信息的障碍。这种漏洞通常发生在加密货币钱包的锁定或解锁阶段。如果钱包在浏览器中存储中间解密结果，攻击者可以利用这些数据（例如通过XSS攻击）来反向工程和重现解密序列。为了全面了解这个漏洞，请考虑一个典型的钱包解锁过程作为例子。

（i）数据检索。钱包接收用户输入的密码，并检索本地存储的加密钱包数据。

(ii)密钥生成。直接使用密码进行钱包认证可能使系统容易受到暴力破解和彩虹表攻击的威胁，因为这在很大程度上依赖于密码的强度。一种常见的身份验证实践是使用哈希迭代方法（称为基于密码的密钥派生函数，PBKDF）从密码中创建一个解密密钥，这样可以增加额外的复杂性和安全性[34, 35]。为了生成解密密钥，钱包可以使用用户的原始输入进行哈希迭代，或者最初对用户的输入进行哈希处理，然后使用获得的密码哈希进行进一步的哈希迭代（使用另一种哈希方法）。

(iii) 数据解密。 使用生成的密钥，钱包尝试解密加密数据。 如果成功并显示出明文钱包数据，则用户将被导航到其他页面执行后续操作。

在我们的观察中发现，一些钱包会粗心地将敏感数据（比如从密码计算得出的哈希值-步骤 ii）在本地存储中，即使解锁后也如此。需要注意的是，解锁过程的实现是透明的，可以轻松地通过审计前端JavaScript文件来获取。因此，攻击者在获取到这个哈希值后，只需要重新执行迭代哈希过程以生成解密密钥（步骤 ii），然后使用该密钥解锁钱包（步骤 8iii）。解密后的钱包数据通常包含助记词或私钥，这会给攻击者完全控制这个钱包。

3.3.2 恶魔漏洞

恶魔漏洞是另一个与存储相关的漏洞。与冗余存储漏洞不同，后者是由固有的钱包设计造成的，而恶魔漏洞则根植于浏览器缓存机制，导致敏感数据被意外地本地缓存。根据报告，MetaMask 的早期版本在导入钱包时将助记词存储在 HTML 的“文本框”标签中。作为浏览器的固有机制，浏览器被设计为从活跃选项卡中缓存文本数据，以保存页面的当前状态，从而实现以后更快的访问和检索。因此，由于缓存机制，这些敏感信息会被保存到本地磁盘。鉴于助记词在加密货币钱包方面的重要性，这是一个重要的安全问题。市场上许多钱包都采用类似的实现方式来显示敏感数据。由于这些实现方式可以在多个功能中找到，包括钱包导入、钱包创建、助记词显示和私钥显示，这类漏洞的潜在影响非常广泛。

3.3.3：不完善的加密

加密算法对于基于浏览器的钱包功能至关重要，特别是对于敏感操作，比如钱包创建和身份认证，正如§3.1 中所强调的那样。对加密的依赖凸显了正确实施加密以保护钱包数据的重要性，这也是我们将其归为“新兴加密货币钱包”类别的原因。在创建分类系统时，我们注意到一些钱包开发者在最佳采用这些算法方面存在知识空白，导致了重要的与加密相关的问题。

一个常见问题是 PBKDF2 算法的迭代次数不足（见§3.3.1）。我们观察到有些钱包只使用了100或5,000次迭代，远低于推荐的10,000次和最佳的310,000次循环。这个迭代次数不足会使钱包更容易受到暴力破解攻击的威胁，尤其是在密码较弱的情况下。此外，加密模式的选择也至关重要。例如，使用AES-CBC模式存在风险，因为它缺乏完整性检查。更安全的选择是像AES-GCM这样的替代方案，它既保证机密性又保证完整性，更为可取。

在这一部分中，我们介绍了 WalletRadar，一个专门设计用于识别基于浏览器的钱包中漏洞的自动化漏洞检测框架的设计。

根据我们的分类法，我们的目标是检测到所有六种类型的漏洞。

我们希望设计一种混合方法，结合静态和动态分析。一方面，通过高效的静态分析可以轻松识别基于浏览器的钱包中的点击劫持、XSS漏洞和缺陷加密等问题。 静态分析阶段包括预处理、AST解析和数据库构建；动态分析阶段包括页面语义识别、页面导航以及有价值的函数数据库等。通过这种方法，我们可以检测钱包代码中的漏洞、点击劫持等问题，并输出检测结果。

举个例子，可以通过筛选采用的加密算法的签名来识别有缺陷的加密方法。由于识别这些漏洞的简单性，可以尽量减少错误报警问题。相比之下，静态分析不适用于检测另外三种漏洞。

由于钱包的密码策略要求和实现各不相同，进行密码输入的动态测试更加合适。此外，恶魔式漏洞和冗余存储漏洞需要监控动态变化的网页信息和本地存储数据。因此，我们提出了另一组动态分析方法来识别这些漏洞。

4.1 方法概览
图2提供了WalletRadar的一般概述。该框架包括三个核心阶段：(i) 静态分析、(ii) 动态分析和(iii) 漏洞检测。

WalletRadar专门针对待验证钱包的代码进行分析。在静态分析阶段，WalletRadar首先执行必要的预处理工作。它不仅对给定的钱包进行反混淆和格式化，还尝试提取其入口接口。基于美化和可读性强的源代码，WalletRadar解析相应的抽象语法树（ASTs）。借助宝贵的函数数据库，WalletRadar可以筛选出可疑函数的ASTs。同时，WalletRadar收集静态特征，如目标函数的位置和一些硬编码参数。为了获取运行时数据，WalletRadar必须在每次函数调用之前进行必要的插装。在动态分析阶段，基于入口接口和插装过的源代码，WalletRadar在本地测试环境中动态部署钱包。根据页面语义数据库，WalletRadar可以模拟用户与页面的交互，并收集运行时数据（如本地存储）。最后，在漏洞检测阶段，根据从上述两个阶段收集的数据，WalletRadar能够高效地识别所有六种类型的漏洞。

4.2 静态分析
静态分析阶段负责收集静态特征并为接下来的动态分析阶段进行仪器化。它包括三个阶段，即预处理、AST解析和代码仪器化。

4.2.1 预处理 正如我们在§4.1中所述，预处理主要负责两件事：美化和提取静态特征。因此，WalletRadar 首先尝试通过js-beauty [37]，一个众所周知和广泛采用的格式化工具，对源代码进行解混淆和重新格式化。然后，为了提取特征，WalletRadar 解析钱包的配置文件（例如“manifest.json”）。具体来说，我们关注与入口接口相关的字段，比如“background”字段，定义了在后台持久运行的脚本或页面；“action”定义了用户打开钱包时显示的页面；“content scripts”定义了在钱包支持的网页上注入和执行的脚本；以及“web accessible resources”定义了可以被其他网页访问的钱包内资源。配置项将直接发送到漏洞检测阶段进行进一步分析。提取的可能入口接口将被发送到动态分析阶段。

在钱包的实现中，基于AST解析的机制将会过滤出可疑的函数，并将它们解析成AST格式。具体来说，WalletRadar会调用Esprima [38]，一个广泛使用的JavaScript解析器，来获取所有函数的AST。

根据收集的相关研究[19,20]和报告[3,27]中的有价值的功能数据库，WalletRadar可以通过简单但有效的正则表达式匹配来识别潜在的易受攻击的API以及它们对应的抽象语法树。有价值的功能数据库中涉及两类API，即加密算法函数和DOM操作函数。加密算法函数处理敏感数据操作，如通过密钥派生函数生成解密密钥或解密钱包数据（例如，"AES.decrypt"和"crypto.subtle.deriveKey"）。另一方面，DOM操作函数通常用于提供用户通知或实现自动网页重定向（例如，"document.write"和"window.location.replace"）。

为了确定这些API的相应AST，在加密算法函数中，我们需要找到它们的准确位置，并提取其中硬编码的参数。因此，会启动一个扩展的前向搜索，从当前文件的最外层函数开始，针对匹配的函数，并记录在此过程中遇到的搜索路径。如果在代码中有某些加密算法参数是硬编码的，它们会在此步骤中被记录下来。这一步骤很关键，因为通过动态代码插装动态地捕获这些参数可能具有挑战性，后者主要用于捕获11个函数中传递的变量。这种方法确保不会忽略任何相关函数的关键信息，从而提高我们分析的准确性。至于DOM操作函数，为了检查它们的数据源是否可以修改，WalletRadar首先需要找到它们的数据源函数。因此，会在源代码的AST上从匹配函数向数据源函数执行一个污点回溯。

同样地，WalletRadar将记录搜索路径以供后续漏洞检测使用。

4.2.3 代码插装是为了更好地在后续的动态分析阶段收集运行时数据。因此，正如我们在第4.2.2节中提到的，我们保留了两种类型的函数：与加密算法相关的函数和DOM操作相关的函数。由于我们关注可能动态传入加密函数的参数，比如密钥和密文，而DOM函数的数据流已通过AST解析获得，我们只对与加密算法相关的函数进行代码插装。具体地说，基于初步实验结果，我们发现与加密算法相关的函数通常被另一层函数包裹，在这一包裹函数的位置，WalletRadar会进行插装以进一步收集参数。以加密算法相关类别下的解密函数为例。在图3中可以看到，在第13行，它调用实际的AES解密函数，参数是c和b，其中b直接通过参数传递，c是从另一个参数a派生而来。在识别包装目标函数的函数（即unlock）时，WalletRadar执行本地数据流分析以定位与解密函数相关的参数（即a），建立这样一种数据依赖关系。然后，在第7行的c赋值前，我们插入了一个collect，这是我们自定义的函数。

因此，通过这个带有记录功能的函数，我们可以获取传递给实际解密函数的数值。

```javascript
1 function 解锁示例(x, y, z) { 2 function 处理(temp) { 3 ...
```

这是一个解密函数的示例代码。在这段代码中，参数a和b被传入函数unlock中进行解密处理，并最终通过CryptoJS库来解密内容。解密后的结果会被存储在变量decrypted中。

124.3 动态分析
这个阶段旨在捕获钱包中的关键运行时数据，例如本地存储数据、功能创新细节和动态HTML内容，这些是静态分析无法收集的。所有收集到的数据将用于最终的漏洞检测。

4.3.1 页面语义识别 为了进行有效的运行时信息收集，WalletRadar 必须首先识别当前页面的功能，即页面的语义。由于不同钱包的具体操作流程各不相同，要实现一组通用的页面语义识别方法并不容易。因此，在敏感操作（如设置密码和导入助记词）上，我们首先进行手动调查，找出这些基于浏览器的钱包可能共享的常见页面。然后，我们基于页面模式建立一个语义数据库，例如特定的文本关键词和HTML元素。利用这个语义数据库，WalletRadar 能够在动态分析过程中高效识别当前页面的功能，并执行相应的后续操作。接着，我们将详细介绍关键页面的手动调查和语义数据库的构建过程。

表2: 包含13个关键页面及其功能性的信息。

页面功能/页面内容 钱包初始化开始页面，欢迎信息入口页面。

数据收集提示 用户协议和隐私政策。

选择创建钱包的方法前，首先需要做好准备工作。

创建新钱包密码设置请设置钱包访问密码。

安全提醒-展示安全最佳实践。

助记词展示：显示备份的助记词短语。

选择现有钱包导入方式。

通过记忆词导入钱包进行恢复。

主要操作首页是一个具有各种功能的界面。

解锁钱包正在解锁钱包界面。

备份钱包 设置 钱包配置设置。

密码验证：验证备份密码。

钱包备份界面，用于备份钱包。

对关键页面进行手动调查。手动调查过程涉及检查每个钱包的用户界面，记录标准和敏感功能，如钱包创建、钱包导入、设置密码和钱包备份。通过对这些页面进行分类，我们能够定义一组代表不同钱包核心功能页面的通用模板。经过分析，我们确定有13个关键页面，可以涵盖浏览器钱包的所有敏感操作，如图4所示。这十三个页面，遵循钱包的使用流程，包括：起始页面、钱包创建准备、导入方式选择、设置密码、助记词显示、助记词导入、主页、钱包解锁、钱包设置、密码验证、钱包备份、钱包初始化、新钱包创建、钱包备份、现有钱包导入、设置密码。需要注意的是，密码设置页面出现两次。

这个流程分为五个阶段：钱包初始化、创建新钱包、导入现有钱包、常规操作和钱包备份。这些页面的功能在表2中展示。可以看出，除了两个可选的提醒页面外，大多数页面遵循基本的顺序。特别是在明确定义的阶段顺序下，一些页面始终在特定页面之后出现。例如，当用户在主页上点击“锁定”按钮时，钱包将导航到解锁页面。

因此，排除了可预测的页面，选择了需要构建语义特征的其他页面。需要注意的是，在分析过程中，我们发现许多钱包在导入助记词时将助记词导入和密码设置功能合并到一个页面上（称为“钱包设置页面”），我们将该页面添加到我们的语义库中。最后，我们选择了9个关键页面来构建它们的语义，如图4中用“*”符号标记的页面。

我们正在构建一个语义数据库。为了能够在页面上高效地识别语义，我们建立了一个语义数据库。具体来说，数据库的每一行都被组织为一个键和一系列特征，其中键是对应的功能，特征由功能的几个指标组成，包括具体的文本关键词和HTML元素。例如，助记词导入是钱包设置页面的一个主要功能之一。因此，我们首先构建了该功能的关键词特征。我们采用了在文本挖掘和信息检索中使用的一种统计测量方法——词频-逆文档频率（TF-IDF）。该方法有助于确定一个词对于一个文档集合或语料库中的文档有多重要。我们应用TF-IDF到20个流行钱包，计算在助记词导入过程中出现的单词频率。随后，基于我们对敏感操作的理解，我们以“动作+对象”的形式构建了该功能的主要关键词语义。这涉及选择能捕捉功能活动本质的特定动词（例如，“导入”和“输入”），配以代表这些动作主体的名词（例如，“恢复短语”和“助记词”）。根据这一指导方针，每个功能的关键词语义由几组单词或短语组成。此外，我们还考虑功能内的交互式HTML元素，例如，在助记词导入过程中，用于输入助记词短语的输入框或12-24个连续输入框。

表格3展示了我们为钱包设置页面建立的关键字语义，包括五个独特的关键字组：其中两个与钱包导入有关，另外三个与创建新密码有关。如果某个功能与每个功能组中的至少一个关键字或短语匹配，并且包含必要的HTML元素，则将其标识为特定语义。此外，识别页面的语义意味着要认识到所有其功能的语义。

根据规则，页面上出现了类似“导入”、“助记词”、“密码”、“输入”、“重复”等关键词，并配有相应的助记词和密码输入框，这个页面被识别为一个钱包设置页面。

表格3：钱包设置页面关键词语义。

第一组：具有语义的词汇或短语，如：引入、输入、提供...

2个恢复短语、助记词、种子短语…

密码，凭据，个人识别码（PIN），...

创建，输入，键入...

重复5次：确认，验证，...

4.3.2 页面导航和运行时数据收集

利用语义数据库的帮助，WalletRadar 需要根据当前页面的功能和元素执行适当的操作，以便在遍历钱包的主要功能的同时并行地收集运行时数据。此外，正如我们在 §4.3.1 中提到的，页面通常会按照一定的顺序显示。确定这些页面的导航路径可以提高动态分析的效率。在浏览页面时，静态分析阶段中植入的功能将被触发以收集运行时数据，例如本地存储数据、功能创新细节和动态 HTML 内容。接下来我们将详细介绍页面导航和运行时数据的收集。

页面导航。具体而言，根据钱包的生命周期设计了两条导航路线，如图4所示。其中一条将钱包视为新创建的钱包，其路径主要由钱包创建和助记词展示组成。

另一条路径认为钱包是被导入的，即包括助记词导入、设置密码、解锁钱包和备份钱包等操作。通过 Selenium框架 [40]（一个著名的用于自动化 web 浏览器的框架），为每个页面设置特定的操作。除了“助记词显示页面”和“助记词备份页面”是两条导航路径的终点外，我们还为其他11个页面定制了操作脚本。到达特定页面时，对应的脚本会被触发。尽管具有不同语义的页面将以不同的方式进行导航，但脚本被设计遵循一般策略。首先，脚本定位带有标签的交互元素，如按钮、复选框和输入字段等，这有助于 WalletRadar 对当前页面进行整体了解，并促进进一步的用户操作模拟。其次，通过点击“继续”等提示来管理弹出窗口和复选框，反映出用户经常遇到和与这些元素进行交互以进行确认或同意的实际场景。第三，在当前页面的输入字段中，脚本系统地使用预定义的凭据填充它们，如用户名和密码。这一步对于测试特定页面如设置密码或导入助记词页面特别重要，因为它允许 WalletRadar 根据预期测试这些功能，并相应地推进测试路径；在标签对应我们预定义凭据未涵盖的字段（如钱包昵称），脚本将生成并输入随机字符串以帮助完成页面的功能。最后，脚本寻求通过参与“下一页”或“确定”等元素来导航到下一页，从而帮助 WalletRadar 成功完成预定义的导航路径。

运行时数据收集。在这些过程中，会触发仪表化代码来收集运行时数据和交互期间生成的敏感数据，如钱包密码和助记词。此外，在页面导航过程中，WalletRadar利用JavaScript中的周期调用函数，持续监控当前HTML页面和本地存储（包括LocalStorage、SessionStorage、IndexedDB和本地会话文件）的变化。每当发生修改时，监视器会每秒执行一次。

在页面导航和数据收集过程中，一些交互元素的位置、页面导航助记符的导入、页面运行数据的收集、弹出框/复选框的管理、输入字段的填充、下一页导航、HTML页面监控、敏感数据的收集、本地存储跟踪等内容在这一页的图表中展示。

以助记词导入页面为例，来演示页面导航和运行时数据收集的过程。在这个页面上，主要的交互元素是"WalletRadar locate"，会展示12、15或24个输入框用于输入助记词（例如，示例中有12个输入框），或者一个单独的文本框，用于输入以空格分隔的所有助记词；接着，在处理弹出窗口和复选框后，WalletRadar会使用在之前创建钱包时生成的助记词填充这些输入框或文本框；对于其他非敏感信息（如钱包名称），会生成并输入随机的16位字符串。导入过程通过点击确认按钮（示例中的蓝色按钮）来完成。由于在静态分析阶段进行了代码检测，WalletRadar将在助记词导入期间捕获前端页面的HTML代码，并在输入助记词后记录本地存储数据。

钱包导入完成后，钱包会自动跳转到首页，然后继续测试钱包解锁页面。

在漏洞检测阶段，WalletRadar利用之前静态分析和动态分析阶段收集的信息，识别给定钱包中隐藏的潜在漏洞。具体来说，WalletRadar集成了六个基于规则的检测器，对应于§3.1中提到的六种漏洞。我们认为，通过基于收集到的信息实现检测器，可以轻松扩展WalletRadar的功能。检测策略将在接下来详细说明。

点击劫持。正如第3.2.1节所述，在基于浏览器的钱包中，点击劫持与“manifest.json”配置文件中的“web accessible resource”项目相关联。

如果根据静态分析，在配置项中存在敏感的HTML页面，比如首页和交易页面，那么可以得出结论：这些网页可以被外部网站（包括钓鱼网站）访问，钱包存在此安全漏洞。

XSS漏洞。根据PortSwigger提供的指导[41]，在静态分析阶段，WalletRadar会从DOM操作函数追溯到数据源。如果在这个追溯的最后发现数据源函数在有价值的函数数据库中，并被确认容易受到外部修改的影响，这意味着可能存在DOM-based XSS漏洞。这种情况突显了一个风险，即钱包网页中的内容可能会被外部篡改或破坏，使钱包容易受到XSS攻击。

密码策略存在缺陷。在动态分析阶段，当遇到一个密码设置页面时，WalletRadar 会尝试在页面上测试一组密码，从最弱的开始（例如“123”）到相对强的密码（例如…）。

当设置一个网页钱包的密码时，可尝试输入一个比较简单的密码，比如"Weasdxz@a142"。系统会记录下最终通过钱包密码设置的那个最弱的密码。根据 CheckPoint 的报告，如果密码只由6位或更少位数字组成，那么这个密码的强度被认为不足以支持网页钱包的安全性。

冗余存储。在动态分析阶段，WalletRadar会持续记录所有中间数据。因此，该检测器会比较本地存储中的数据和解密过程中生成的中间数据。如果中间数据能够与本地存储数据的一部分匹配，钱包可能会泄漏敏感信息，也就是存在冗余存储漏洞。

恶魔漏洞检测器。这个工具专注于前端HTML页面中的文本元素（比如“文本区域”标签）。为了检测恶魔漏洞，该检测器在敏感操作期间会扫描HTML页面上的特定文本元素，特别关注那些保存明文记忆密钥或私钥的元素。

如果在浏览器的本地存储中发现这些元素，并且对应的明文数据也存在，那么该钱包将被标记为存在恶意漏洞。

有瑕疵的加密。如果检测器发现钱包使用PBKDF2少于10K轮或者采用不恰当的方法比如AES-CBC模式，那么该钱包被认为存在加密漏洞。

在这一部分中，我们将对WalletRadar进行全面评估，以描绘浏览器扩展钱包中存在的漏洞特征。

5.1 研究问题与实验设置
在本文中，我们关心以下问题：研究问题1：IsWalletRadar在检测这些漏洞方面是高效和有效的吗？研究问题2：野外脆弱钱包的特征是什么？
为了回答研究问题1，由于目前不存在用于基于浏览器的钱包的现有数据集，我们从Chrome Web Store [42]收集了一个数据集。我们手动检查这些样本，建立可靠的基准来评估WalletRadar的效率和有效性。
为了回答研究问题2，基于检测结果，我们分析这些漏洞的特征，评估它们的影响，并跟踪开发人员的反应和修复工作。

实验设置。我们基于Python3实现了WalletRadar。具体来说，WalletRadar利用js-beautify [37]进行代码格式化，Esprima [38]用于解析JavaScript的抽象语法树，以及Selenium框架 [40] 用于调用自动化脚本。其他分析组件，包括自动化运行时脚本、有价值的函数数据库和检测规则，都是独立设计的。以下实验在一台配备Intel Core i7-12700H@2.3GHz处理器和16G内存的笔记本电脑上进行。Selenium框架在Chrome网页浏览器（版本:102.0.5005.189）上运行，用于动态测试基于浏览器的钱包。

数据集收集。我们从谷歌Chrome网上应用商店中采集基于浏览器的样本，这是最为广泛采用和知名的浏览器扩展平台之一。在搜索“区块链钱包”时，我们获得了618个结果。为了生成有效的结果，我们根据一些标准进行了过滤处理。首先，由于我们的研究对象是基于浏览器的非托管钱包，不考虑其他类型的钱包。其次，这些钱包需要受欢迎。因此，我们保留了拥有3,000多用户的钱包。为了涵盖尽可能多的使用案例，我们考虑支持单一或多个区块链的钱包。最后，我们总共收集了120个样本。然而，我们发现其中一些功能不完善，比如在创建钱包或导入助记词时出现问题。因此，基于网上商店上用户的评论，我们删除了声誉不佳的样本。因此，96个样本被认为是候选样本，涉及多个区块链，如比特币、以太坊和索拉纳。

考虑到样本数量有限并且数据集中缺乏已建立的漏洞真相，我们选择对每个样本进行全面的手动分析。为了建立一个可信赖的基准，我们进行了手动标记。表4：用户下载最多的前10个基于浏览器的钱包。

名称: Metamask
版本: 10.14.0
用户支持: 1000万+
支持的区块链: 以太坊, Polygon, ...

幻影 22.9.6 2百万以上 Solana、Ethereum、...

Ronin钱包版本1.23.1有超过100万的用户，Ronin币安钱包版本2.13.7也有超过100万的用户，支持BNB链、以太坊等链。

Coinbase 2.30.2支持超过1百万的以太坊和Avalanche等加密货币。

Keplr 0.11.1 版本已经发布，新增了超过 90 万个 Osmosis、Mars 等功能...

3.1.0 站点 600K+ 贝壳币 X 5.2.0 600K+ 以太坊 TronLink 3.26.9 500K+ 波场 Martian 钱包 0.2.2 500K+ Sui、Aptos 由两名经验丰富的作者独立完成，他们熟悉基于浏览器的钱包中典型的漏洞特征。通过这样做，我们能够精准地识别和分类相关的漏洞，从而创建一个准确的基准数据集，用于指导未来的分析和比较工作。

数据集概览。简而言之，这些样本总共被下载了至少2300万次，占据了Chrome网上应用商店“区块链钱包”搜索结果中约97%的下载量。这表明基于浏览器的非托管钱包是区块链用户的主要选择。根据下载次数，排名前十的基于浏览器的钱包列在表格4中。正如我们所看到的，它们至少有50万用户，并支持总共超过10个区块链，凸显了它们在迎合不同区块链平台和用户需求方面的广泛受欢迎和多样化。

5.2 第一个研究问题：效率与效果 在本节中，我们评估了WalletRadar在收集的96个样本中识别漏洞时的效率和有效性。

5.2.1 自动化效率测试
我们使用 WalletRadar 对这 96 个样本进行了自动化测试。其中，有 9 个样本仅在创建钱包、导入钱包等过程中由于其独特属性在静态分析阶段完成，阻止了自动化动态操作的完全完成。例如，一个钱包可能需要长按才能导出助记词，而另一个在页面导航期间指导用户转到外部网站，这两种情况打乱了典型的测试工作流程。然而，其余的 87 个样本仍然成功完成了所有自动化分析流程，实现了 90.6% 的自动化完成率。我们还手动干预了这 9 个未能完成动态分析阶段的样本，以确保它们经历完整的漏洞检测。在自动化测试过程中，每个样本的执行时间约为 8 分钟，其中大约 5 分钟用于静态分析阶段，约 3 分钟用于动态分析阶段。

表5：96个样本的检测结果。

漏洞种类漏洞数量误报漏报 恶魔漏洞 55 0 0 密码策略缺陷 20 0 0 冗余存储 18 0 0 点击劫持 13 0 0 密码策略缺陷 2 0 4 跨站脚本攻击（XSS） 2 0 2 总计 110 0 6 这表明，WalletRadar 的自动化测试相对迅速，这归功于其清晰的执行路径和操作。

5.2.2 检测结果评估

表5显示了对96个样本的检测结果。可以看到，WalletRadar在70个样本中发现了总共110个漏洞（占所有测试样本的73%）。其中，恶魔漏洞成为这些钱包扩展中最严重的问题，占被测试样本的57%。这可能是因为许多钱包扩展分叉了著名钱包MetaMask的早期版本，而MetaMask先前包含了一个恶魔漏洞。另外三个稍微较不严重的问题是有缺陷的密码策略（20个）、多余的存储（18个）和点击劫持（13个）。这表明钱包扩展上既存在针对钱包的漏洞，也存在传统的web漏洞。其中，有53%（37个）的钱包存在一个漏洞，而具有最多漏洞的钱包除了有缺陷的加密外还存在5个不同问题。

在谈论虚假警报时，我们定义“误报”是指当 WalletRadar 标记不存在的漏洞时发生的“误报阳性”，而“漏报”是指它错过了真实漏洞的情况。为确保对 WalletRadar 的检测能力进行准确评估，评估过程涉及对目标钱包代码和功能的详细审查，以识别已知漏洞模式，并将其与该工具的结果进行比较。在评估后，我们发现在所有六个漏洞中不存在“误报阳性”。我们推测这可能是由于这些漏洞的特性以及 WalletRadar 的高效性所致。从一开始利用全面的有价值的功能数据库增强了我们检测的准确性，再加上使用明确定位独特漏洞模式的具体静态规则。此外，我们准确的动态测试方法可以区分真实漏洞和正常行为。此外，我们很容易观察到 WalletRadar 无法完全检测跨站脚本攻击和有缺陷的加密漏洞。经过手动验证，我们发现四个有缺陷的加密案例包括两次“不安全的 AES 使用”和两次“迭代不足”。

这四个样本的加密参数是在闭包或局部范围内动态生成的，而不是硬编码的，因此它们可以规避静态分析。动态插装设计用于在运行时捕获参数，但在这些情况下失败了，因为这些参数是在特定执行上下文或瞬态状态中生成的，这些状态在插装阶段不活动或不可访问，从而阻止了它们的捕获和分析。至于跨站脚本漏洞中的两个误报，我们发现数据源和漏洞点分布在不同的文件中。因此，基于AST的分析方法在跨文件检测方面遇到困难，导致这些疏忽。

研究问题1的回答：我们在96个广泛使用的加密货币钱包上进行的实验显示，我们的工具WalletRadar可以在超过90%的钱包上自动完成检测过程，当进行手动干预时，能够覆盖所有的钱包。此外，WalletRadar在我们收集的数据集中表现出很高的准确性，没有误报的情况，并且假阴性的发生率很低。总的来说，WalletRadar被证明在识别漏洞方面既高效又有效。

5.3 研究问题2: 野外易受攻击钱包的特征 在本节中，我们首先描述了这些漏洞在野外是如何传播的。然后，我们评估了它们直接带来的影响。

5.3.1 对真实世界漏洞的研究-恶魔漏洞。在我们的评估中发现，有55个钱包在备份、导入或显示助记词和私钥时使用文本HTML标签来存储敏感信息。以图6中的P*钱包1为例，当用户显示私钥时，该钱包使用文本标签来存储私钥，这些数据将被缓存在本地存储中，构成敏感数据泄露的威胁。修复此漏洞的方法是在HTML页面中使用12-24个带有“input”标签和“password”属性的输入框来容纳用户的助记词或私钥。当采用这种实现时，用户需要进行多次输入，这可能会很繁琐，并且需要开发人员在助记词输入优化上投入更多努力。

密码策略缺陷。在20个样本中，有1个样本需要最少4位数字，9个样本不要求密码复杂度，另外10个样本要求最少6位数字。值得一提的是，在96个样本中，只有29个样本具有混合字母和数字的最低密码复杂度要求。在现实世界的场景中，基于浏览器的加密货币钱包存在着非常弱的密码可能性，这导致更容易的暴力破解，危及用户钱包的安全。为了构建一个安全的加密货币钱包，最好要求密码至少为8位，并且包含数字和字母的混合。

出于道德考虑，我们已对钱包的名称进行了匿名处理，仅显示它们的首字母。

图6：P* 钱包中的恶魔式漏洞——(a) 私钥展示页面 (b) 页面HTML代码 (c) 浏览器会话文件。

冗余存储。所有这种漏洞都是在解锁加密货币钱包的过程中发现的，评估结果显示这种漏洞在实际情况中很严重。18个样本展示了这种漏洞的不同表现：(i) 将解密函数所需的密钥嵌入到代码中。

将所有解密函数所需的原材料存储在本地存储中。

(iii) 使用基于时间戳的对称加密技术将用户的密码保存在本地存储中，其中时间戳是以明文形式存储的。

使用对称加密，使用固定密钥将用户的密码加密并存储在本地存储中，其中固定密钥嵌入在代码中。

在本地存储中直接存储用户的明文密码。

将用户密码的初始哈希结果存储在本地存储中（而不使用它进行解密）。

前五种情况可能直接导致用户失去对钱包的控制，如果攻击者获取了存储内容的访问权限。在第六种情况中，尽管钱包将用户密码的初始哈希结果（例如SHA-512）存储在本地存储中，但并没有将哈希用于解密。相反，当用户输入他们的密码时，钱包会执行相同的哈希处理过程，然后比较两个哈希结果以验证密码。虽然这种做法不能直接导致用户的钱包被解密，但它使得攻击者可以提取哈希并用于暴力破解，从而对用户的钱包构成严重威胁。图7(a)是一个例子，H*钱包直接在本地存储中以明文保存用户的密码，使得钱包容易受到攻击。对于S*钱包来说，尽管它将处理后的密码保存在本地存储中而不是明文，但这些数据依然可能受到威胁。图7: 两个钱包中存在的冗余存储漏洞。

图7（b）展示了直接用于解密函数中的助记词，这也是一种不安全的做法。

这六个案例都是与钱包开发者处理敏感数据存储时的不良做法有关，其中第五个案例是最严重的，完全暴露了凭证。建议将解密过程保持实时进行，不要仅仅为了方便而将任何敏感数据保存在本地存储中。

点击劫持。我们发现了13个数字钱包样本存在点击劫持漏洞，这表明在实际情况中，这类漏洞也非常突出。我们确定了两种情况，即这些加密货币钱包存在此类漏洞：在“网络可访问资源”配置中的“钱包主页”和“安全提示页面”。一些钱包直接在配置中引入“钱包主页”，这种实现方式使这些钱包的主页容易受到劫持攻击，导致用户不知不觉地下载恶意软件、访问恶意网页或提供敏感信息。

此外，有些钱包还提供用户一些安全检测服务（如钓鱼检测等）和点击跳转功能，但却无意中引入了这种类型的漏洞。图8展示了一个利用该漏洞的基本示例。该代码可以被嵌入在钓鱼网站中，覆盖钱包的钓鱼警告页面，诱使用户跳转到钱包主页并执行敏感操作。

在“web可访问资源”配置中引入文件的最初目的是为了让外部网页能够访问资源（比如图片）。

然而，在介绍HTML文件时，其他外部页面可以直接访问网页，并有可能将这些HTML页面嵌入到钓鱼网站中，导致点击劫持。钱包开发人员需要避免添加231<iframe src="chrome-extension://{extension id}/phishing.html?href=chrome-extension://{extension id}/wallet.html" width="100%" height="100%">2</iframe>图8：S* 钱包中点击劫持的代码实现。

这段代码存在加密漏洞。其中函数a接受两个参数e和t，通过将e转换为UTF-8编码，t转换为base64编码，并使用PBKDF2算法生成密钥，然后进行加密操作。但是在importKey方法中，参数name值错误为"PBKDF2 "，生成密钥时应该用正确的"PBKDF2"。

将HTML文件配置为此设置，或确保添加的HTML文件不包含导入钱包、发送交易等关键钱包功能。

瑕疵的加密。在加密实践中，通常建议使用像argon2、scrypt和PBKDF2这样的算法，通过更多次的迭代来基于用户密码生成密钥。在我们的研究中，虽然大多数钱包都遵循了PBKDF2建议的10,000次迭代的标准，但有三个样本低于这个标准，使用少于5,000次迭代，其中一个在图9中有描述。

只有五个样本经过 310,000 次迭代后展现出了卓越的安全性。这表明大多数钱包通常符合密码标准，但通常没有实施最高级别的安全实践。再加上密码政策不足，未实施最高安全标准的这一不足会增加暴力破解攻击的风险。

此外，大多数钱包都采用AES进行对称加密和解密。我们发现只有三种情况使用了安全性较低的CBC模式，而其他的都遵循了最佳实践，采用了GCM或CTR模式。

跨站脚本漏洞。在96个样本中，仅有4个样本被检测出存在DOM-based XSS漏洞（其中一个样本的代码如图10所示）。这些漏洞发生在与点击劫持有关的HTML页面上，并与钱包提供的安全提醒功能有关，表明暴露的HTML页面（介绍在“web可访问资源”配置中）更有可能在基于浏览器的加密货币钱包中存在XSS漏洞。值得注意的是，尽管这些样本的代码暗示它们容易受到XSS攻击，241window.onload = function() {2 if ("/phishing.html" === window.location.pathname) {3 //提取“主机名称”参数并赋值给变量"e"4 const {hostname: e} = h();5 //将参数值直接写入HTML页面6 document.getElementById("esdbLink").innerHTML = '<b>要了解更多关于这个骗局的信息，请转到：<a href="https://etherscamdb.info/domain/' + e + '">https://etherscamdb.info/domain/' + e + "</a></b>"7 }8}9 10function h() {11 //解析当前URL中的哈希值12 const e = window.location.hash.substring(1);13 return o.parse(e)14}图10：一个存在XSS漏洞的代码片段。

经进一步手动检查发现，他们采用了内容安全策略（CSP），这种额外的安全层将减轻这种漏洞的影响。

根据分析结果，我们发现了70个存在漏洞的钱包，至少有920万次下载。在这些钱包中，最受欢迎的一个下载量超过了100万次，其中23%的钱包拥有超过10万用户。如果这些钱包遭受攻击，将有大量用户面临信息泄露甚至财产损失的风险。因此，当我们在2023年2月完成对这70个示例的分析后，我们重新复制了漏洞以确认其存在，并试图与开发人员取得联系以报告这些问题。最终，我们从8个拥有2000美元以上赏金的钱包的开发人员那里确认了10个漏洞。在学习时间内，我们再次访问了存在漏洞的钱包，并检查这些漏洞是否已修复。这些检查的结果在表6中进行了详细说明，展示了漏洞的当前状态概况。

表6：基于浏览器的钱包中已识别漏洞的当前状态。

漏洞：漏洞数量、已修复数量及确认的恶魔漏洞55个，已修复18个，确认6个；不安全的密码策略20个，已修复6个，确认3个；冗余存储18个，已修复3个，确认1个；点击劫持13个，已修复6个，确认0个；不安全的加密6个，已修复3个，确认0个；XSS（跨站脚本攻击）4个，已修复0个。共计116个漏洞，已修复36个，确认10个。

25个活跃钱包仍未解决问题。我们将过去六个月内进行了更新的钱包称为“活跃钱包”。对于29个活跃钱包，我们的手动检查表明，它们的开发人员主要致力于更新功能或修复功能中的错误，比如添加对DApp的支持，推出新代币的促销活动，或与加密货币交易所集成等。

此外，一些开发者认为用户应该自己负责保护钱包的安全，并拒绝修复与密码策略和加密相关的弱点。尽管钱包用户控制着他们的密钥并且主要负责确保它们的安全，但期望所有用户拥有良好的密码管理习惯是不现实的。因此，钱包的开发者也应尽可能关注钱包的安全性，为钱包用户铺平道路，减少对用户的潜在风险。

我们还发现，一些钱包声称已经修复了恶魔漏洞，但实际上只修复了Metamask博客中提到的漏洞，却忽略了其他具有恶魔漏洞的功能。在第5.3.1节中展示的图6中，我们可以看到P*钱包的示例，其中私钥显示页面仍然存在漏洞。这表明有些开发者对与漏洞相关的信息了解不够全面，导致了对漏洞修复的不完全性。

有问题的活跃钱包已全部或部分得到解决。在26个活跃钱包中，有8个钱包的开发者向我们确认了他们钱包的10个漏洞，并且都在研究期间修复了这些问题。在我们报告问题之前，有5个钱包已经完全解决了5个问题，10个钱包在报告后默默地解决了14个漏洞，其中4个是在我们联系他们之前就已经修复了。在剩下的3个钱包中，没有一个完全解决了他们的漏洞。两个钱包（包括在§5.2.2提到的漏洞最多的钱包）在我们的报告之后只是默默地解决了恶魔漏洞，其他漏洞仍未修复。开发者选择首先解决类似恶魔漏洞这样的严重漏洞，在比例和顺序上，可能表明他们优先处理最为关键的问题，有意在未来更新中解决较不严重的漏洞。

此外，在我们报告之前，一个钱包修复了点击劫持的漏洞，但在报告之后仍保持其6位数字密码策略不变。我们推测这是因为开发人员可能担心修复密码策略会导致向后兼容问题，或者他们可能认为当前的密码强度已经足够。

对于仍未更新或从Chrome网上应用商店中移除的15个钱包，我们发现一些钱包开发人员在构建了钱包扩展的基本功能后，转移到了新项目，而另一些则停止了维护。然而，由于非托管钱包可以在没有中央服务的情况下运作，仍在使用这些钱包的用户可能会遭受到不知不觉的攻击。考虑到至少有31.4万名曾使用过这些钱包的用户，可能有许多用户面临被攻击的风险。

总的来说，我们披露的漏洞导致了20个钱包被开发人员更新，其中包括8个钱包的开发者确认和修复了问题，以及12个钱包的开发者悄悄地修补了这些漏洞，修复了总共26个漏洞。这占我们发现的漏洞总数的22.4%，保护了这些钱包数以千计的用户免受潜在攻击。然而，值得注意的是，许多开发人员仍然没有足够重视钱包安全开发过程，从而可能危及他们的用户基础的安全性。

研究回答2：对116个真实世界漏洞的案例研究揭示了基于浏览器的钱包中存在广泛的安全问题。值得注意的是，这些恶魔般的漏洞变得非常关键，但往往被开发人员忽视了可能的发生。其他漏洞也揭示了这些浏览器扩展中钱包特定的和一般网络漏洞的混合。这凸显了这些开发者在安全开发实践方面可能存在的不足。进行的影响分析显示，这些漏洞对大约920万用户构成了重大风险，威胁范围涵盖了信息泄露到财务损失。针对我们披露的这些漏洞，已经在20个不同的钱包中纠正了26个漏洞，从而减轻了可能造成的不良影响。

6 讨论 6.1 意义 对于社区中的利益相关者来说，对基于浏览器的加密货币钱包中安全问题的特征化和检测工作是至关重要的。

对于开发人员和钱包用户来说，在基于浏览器的加密货币钱包安全问题分类术语可以帮助他们理解潜在的漏洞，并在应用程序的安全生命周期中提供有价值的参考。此外，尽管编程语言和平台多种多样，但其他类型的区块链钱包和区块链应用通常共享常见的操作工作流程或机制。例如，许多桌面钱包也使用相同的密钥管理技术（例如，使用PBKDF2进行密钥生成），与基于浏览器的钱包类似。因此，《钱包雷达》的某些组件，包括自动化测试模块和已识别的漏洞模式，可以在进行一些修改后，用于其他应用程序。

我们提出的检测框架的评估表明了我们的方法的有效性，同时表明当前许多基于浏览器的钱包存在各种安全漏洞。此外，虽然WalletRadar 旨在检测本文中提到的漏洞，但它也具有很高的可扩展性。例如，可以添加或优化易受攻击的函数数据库以及漏洞检测器的规则，从而便于有针对性地检测与基于浏览器的钱包相关的后续漏洞。结合本文中描述的网页应用程序审核方法，可以帮助减少钱包开发过程中的漏洞，并降低用户的财务损失风险。

此外，我们对这些漏洞的影响分析表明，数以百万计的用户可能容易受到与这些漏洞相关的攻击，从而导致巨额的财务损失。此外，我们在报告这些漏洞后对这些钱包进行了持续27次的分析，结果显示只有少数开发者完全修复了这些漏洞，而一些严重的漏洞，如"恶魔漏洞"，甚至因为开发者对其肤浅的了解而错误地认为已经修复。开发者应更加重视钱包安全问题，深入理解这些漏洞，以有效修复并充分减轻它们的影响。

我们意识到在基于浏览器的钱包中检测漏洞涉及道德层面，并通过匿名化应用程序名称来维护机密性。我们负责任地披露以确保开发者有时间修复问题，然后再将其公之于众，并为所有漏洞提供修复策略。我们的目标是提高区块链生态系统的安全性，使其对用户更加安全可靠。

6.2 限制性主要来说，我们最初根据从各个渠道收集的信息（如§3.1所述）建立了基于浏览器的加密货币钱包安全问题的分类法。虽然我们已经尽力完善分类法，但仍可能存在不完整之处。

然而，通过评估确认了我们提出的分类系统的实用性和有效性，揭示出当前基于浏览器的加密货币钱包面临的许多安全问题。

目前基于关键词的语义方法用于在动态分析中识别关键钱包页面可能在更复杂的语义环境中存在不足。更先进的技术，比如光学字符识别（OCR）和大型语言模型(LLMs)，可以通过更有效地理解和解释复杂页面内容来增强页面遍历能力。这些技术承诺可以优化自动化流程，潜在地提高覆盖率超出当前的90%，并减少对手动干预的需求。

此外，由于大多数基于浏览器的钱包都是非托管钱包，用户的地址并不是公开的，所以很难在区块链上追踪这些钱包是否真的受到了攻击。尽管如此，我们的实验和随后的调查表明，这些漏洞仍未被修复，有可能对大量用户造成财务损失。

7 相关工作 7.1 网络应用分析

浏览器扩展程序对加密货币钱包来说本质上是网络应用程序，这使我们进入了关于软件工程中网络应用分析的更广泛讨论。由于网络应用程序已经在开发中多年，有很多工作致力于研究网络应用程序并开发相关的分析工具。一些工作重点放在自动化网络应用程序测试上。例如，郑等人提出了一种端到端自动化网络测试框架，利用驱动好奇心的强化学习，能够高效生成高质量的网络应用程序测试动作序列。针对这项工作更相关的另一个主要研究方向是开发自动化检测框架，用于检测网络应用程序中的安全问题，比如 XSS 或隐私泄露相关漏洞。例如，潘等人提出了一个检测框架，采用混合分析结合轻量级静态分析，包括文本过滤器和抽象语法树解析器以及动态符号执行来检测基于 DOM 的 XSS 漏洞。为了检测隐私泄漏，陈等人提出了一种混合污点分析技术，利用动态污点跟踪和静态分析，利用从静态数据流和控制流依赖性分析中收集的信息，在运行时传播污点。此外，Kariryaa 等人发现用户对浏览器扩展程序的功能了解有限，只关注这些扩展程序提供的功能特性。

以上工作为本文提供了许多关于漏洞分类和浏览器扩展漏洞检测方法的见解。基于这些静态和动态分析方法，本文定制和优化了WalletRadar，以满足基于浏览器的加密货币钱包的特定需求，解决了它们独特的漏洞和操作流程。

目前关于加密货币钱包的研究主要集中在手机应用程序钱包上[14, 15, 19–21, 52, 53]。例如，Sai等人[19]首次使用静态代码分析和网络数据分析评估基于安卓系统的加密货币钱包的安全问题，发现热门加密货币钱包应用的安全性并不比银行应用显著更差，但它们缺乏隐私保护措施。Li等人[14]评估了加密货币钱包应用程序的安全问题，并展示了它们的全面攻击面。He等人[21]在假设攻击者可以以高权限访问用户的手机设备的前提下进行相关攻击实验。

除了研究人员关注移动钱包外，Praitheeshan等人还对基于智能合约的区块链以太坊钱包进行了安全评估。

他们利用自动扫描工具对使用智能合约的链上钱包进行了安全分析，并对安全问题进行了分类。

Guri等人进行了一项关于空气隔离加密货币钱包（即与互联网隔离的钱包）的安全分析，并证明攻击者仍然可以通过各种数据泄露技术来攻击孤立的离线钱包，窃取私钥。

目前对基于浏览器的加密货币钱包缺乏系统性的安全分析。鉴于使用基于浏览器的钱包的用户群体庞大，有必要对其进行深入了解，并开发自动化安全评估工具，以帮助开发人员在开发过程中应对潜在的漏洞。在这项工作中，我们迈出第一步，对基于浏览器的钱包进行漏洞特征化和检测。

结论：本文首次系统评估了基于浏览器的加密货币钱包的漏洞。我们提出了WalletRadar，这是一个利用静态和动态分析相结合的自动检测框架，可以高效地识别漏洞。对流行的基于浏览器的钱包进行的实验表明，WalletRadar在大多数钱包上都能自动运行，准确率很高。评估结果还揭示了普遍存在的安全问题，突显出许多开发者对这些漏洞缺乏足够的意识。不幸的是，只有少数开发者彻底解决了这些安全漏洞。
